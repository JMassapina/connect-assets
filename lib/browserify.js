// Generated by CoffeeScript 1.3.3
(function() {
  var Browserify, BrowserifyWrapper, path, uglify, _;

  uglify = require('uglify-js');

  Browserify = require('browserify');

  path = require('path');

  _ = require('underscore');

  module.exports = BrowserifyWrapper = (function() {

    function BrowserifyWrapper(options) {
      this.options = options;
      this.jsBundles = {};
      this.changedPaths = {};
    }

    BrowserifyWrapper.prototype.requireBundle = function(flags, cb) {
      var changed, requireBundle, requireBundleText, requireRoute,
        _this = this;
      requireRoute = 'js/require.js';
      requireBundle = new Browserify();
      if (flags.minify) {
        requireBundle.register('post', this._minify);
        _.each(requireBundle.files, function(file, fileName) {
          if (fileName != null) {
            return file.body = _this._minify(file.body);
          }
        });
      }
      requireBundleText = requireBundle.bundle();
      this.jsBundles[requireRoute] = requireBundle;
      changed = !(this.changedPaths[requireRoute] != null);
      this.changedPaths[requireRoute] = false;
      return cb(null, requireBundleText, changed);
    };

    BrowserifyWrapper.prototype.getConcatenation = function(filePath, flags, callback) {
      var bundle, bundledSrc, entryFilePath, _ref,
        _this = this;
      if (filePath === 'js/require.js') {
        return this.requireBundle(flags, callback);
      }
      if (typeof flags === 'function') {
        callback = flags;
        flags = {};
      }
      if (flags == null) {
        flags = {};
      }
      if ((_ref = flags.async) == null) {
        flags.async = true;
      }
      if (this.changedPaths[filePath] != null) {
        bundle = this.jsBundles[filePath];
        return callback(null, bundle.bundle(), this.changedPaths[filePath]);
      }
      bundle = Browserify({
        debug: true,
        watch: flags.watch
      });
      bundle.files = {};
      bundle.prepends = [];
      if (flags.minify) {
        bundle.register(this._minify);
      }
      entryFilePath = path.join(this.options.src, filePath);
      bundle.addEntry(entryFilePath);
      bundledSrc = bundle.bundle();
      this.changedPaths[filePath] = false;
      bundle.on('bundle', function() {
        return _this.changedPaths[filePath] = true;
      });
      this.jsBundles[filePath] = bundle;
      return callback(null, bundle.bundle(), true);
    };

    BrowserifyWrapper.prototype.getCompiledChain = function(filePath, flags, callback) {
      throw new Error('Not supported when using browserify');
    };

    BrowserifyWrapper.prototype._minify = function(js) {
      var ast, jsp, pro;
      jsp = uglify.parser;
      pro = uglify.uglify;
      ast = jsp.parse(js);
      ast = pro.ast_mangle(ast);
      ast = pro.ast_squeeze(ast);
      return pro.gen_code(ast);
    };

    return BrowserifyWrapper;

  })();

}).call(this);
